---
import Footer from '@/components/Footer.astro';
import Navbar from '@/components/Navbar.astro';
import { AppConfig } from '@/utils/AppConfig';

export interface Props {
  head: {
    title: string;
    description: string;
  };
}

const {
  head: { title, description }
} = Astro.props as Props;
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title}</title>
    <meta name="description" content={description} />
    <meta name="author" content={AppConfig.author} />

    <link rel="sitemap" href="/sitemap-index.xml" />
    <link rel="alternate" type="application/rss+xml" href="/rss.xml" />
    <link rel="icon" href="/favicon.svg" />

    <script is:inline>
      (function () {
        const html = document.documentElement;
        const stored = localStorage.getItem('theme');
        const theme =
          stored === 'light' || stored === 'dark' || stored === 'auto' ? stored : 'auto';
        const isDark =
          theme === 'dark' ||
          (theme === 'auto' && window.matchMedia('(prefers-color-scheme: dark)').matches);

        if (isDark) {
          html.classList.add('dark');
        } else {
          html.classList.remove('dark');
        }
      })();
    </script>

    <script>
      type Theme = 'light' | 'dark' | 'auto';

      function applyTheme(theme: Theme): void {
        const html = document.documentElement;
        const isDark =
          theme === 'dark' ||
          (theme === 'auto' && window.matchMedia('(prefers-color-scheme: dark)').matches);

        if (isDark) {
          html.classList.add('dark');
        } else {
          html.classList.remove('dark');
        }
      }

      function getStoredTheme(): Theme {
        const stored = localStorage.getItem('theme');
        if (stored === 'light' || stored === 'dark' || stored === 'auto') {
          return stored;
        }
        return 'auto';
      }

      const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
      mediaQuery.addEventListener('change', () => {
        const theme = getStoredTheme();
        if (theme === 'auto') {
          applyTheme(theme);
        }
      });

      (window as any).themeManager = {
        getTheme: getStoredTheme,
        setTheme: (theme: Theme) => {
          localStorage.setItem('theme', theme);
          applyTheme(theme);
        }
      };
    </script>
  </head>
  <body
    class="flex min-h-screen flex-col bg-stone-100 font-mono text-gray-950 dark:bg-stone-900 dark:text-white"
  >
    <Navbar />
    <div class="flex-1">
      <slot />
    </div>

    <Footer />
  </body>
</html>

<style is:global>
  :root {
  }
</style>
