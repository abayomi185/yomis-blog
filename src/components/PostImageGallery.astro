---
import { Image } from 'astro:assets';

export interface GalleryImage {
  src?: ImageMetadata;
  key?: string;
  alt?: string;
}

export interface Props {
  images: GalleryImage[];
  alt?: string;
  columns?: number;
  showCaptions?: boolean;
  class?: string;
  width?: number;
  height?: number;
}

const {
  images,
  alt = '',
  columns = 3,
  showCaptions = false,
  class: className,
  width,
  height
} = Astro.props;

const gridColsClass =
  {
    1: 'grid-cols-1',
    2: 'grid-cols-1 sm:grid-cols-2',
    3: 'grid-cols-1 sm:grid-cols-2 md:grid-cols-3',
    4: 'grid-cols-1 sm:grid-cols-2 md:grid-cols-4'
  }[columns] || 'grid-cols-1 sm:grid-cols-2 md:grid-cols-3';

const maxWidthClass =
  {
    1: 'max-w-md',
    2: 'max-w-3xl',
    3: 'max-w-6xl',
    4: 'max-w-7xl'
  }[columns] || 'max-w-6xl';

const imageCount = images.length;
const actualGridCols =
  imageCount === 1
    ? 'grid-cols-1 max-w-md'
    : imageCount === 2
      ? 'grid-cols-1 sm:grid-cols-2 max-w-3xl'
      : gridColsClass;
---

<>
  <div
    class={`grid ${actualGridCols} ${imageCount > 2 ? maxWidthClass : ''} gap-4 mt-8 mx-auto p-0 auto-rows-auto ${className || ''}`}
  >
    {
      images.map((image) => (
        <figure class="m-0 flex flex-col">
          <Image
            src={(image.key as string) ?? (image.src as ImageMetadata)}
            alt={image.alt || ''}
            width={width ?? 1200}
            height={height ?? 800}
            inferSize
            class="h-auto w-full rounded-lg object-cover transition-all duration-300 ease-in-out hover:-translate-y-0.5"
          />
          {showCaptions && (
            <figcaption class="mt-2 text-center text-sm italic leading-relaxed text-gray-600 dark:text-gray-400">
              {image.alt || ''}
            </figcaption>
          )}
        </figure>
      ))
    }
  </div>
  {
    alt && (
      <figcaption class="mt-2 text-center text-sm italic leading-relaxed text-gray-600 dark:text-gray-400">
        {alt}
      </figcaption>
    )
  }
</>
